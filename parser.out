Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    INT
    RESERVED
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     statement -> expression SEMICOLON
Rule 3     statement -> IDENTIFIER LBRACE statement RBRACE
Rule 4     expression -> expression PLUS expression
Rule 5     expression -> expression MINUS expression
Rule 6     expression -> expression TIMES expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> LPAREN expression RPAREN
Rule 9     expression -> NUMBER
Rule 10    expression -> IDENTIFIER

Terminals, with rules where they appear

DIVIDE               : 7
EQUALS               : 
IDENTIFIER           : 3 10
INT                  : 
LBRACE               : 3
LPAREN               : 8
MINUS                : 5
NUMBER               : 9
PLUS                 : 4
RBRACE               : 3
RESERVED             : 
RPAREN               : 8
SEMICOLON            : 2
STRING               : 
TIMES                : 6
error                : 

Nonterminals, with rules where they appear

expression           : 2 4 4 5 5 6 6 7 7 8
program              : 0
statement            : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) statement -> . expression SEMICOLON
    (3) statement -> . IDENTIFIER LBRACE statement RBRACE
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    program                        shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) statement -> expression . SEMICOLON
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 7
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 4

    (3) statement -> IDENTIFIER . LBRACE statement RBRACE
    (10) expression -> IDENTIFIER .

    LBRACE          shift and go to state 12
    SEMICOLON       reduce using rule 10 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)


state 5

    (8) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 13

state 6

    (9) expression -> NUMBER .

    SEMICOLON       reduce using rule 9 (expression -> NUMBER .)
    PLUS            reduce using rule 9 (expression -> NUMBER .)
    MINUS           reduce using rule 9 (expression -> NUMBER .)
    TIMES           reduce using rule 9 (expression -> NUMBER .)
    DIVIDE          reduce using rule 9 (expression -> NUMBER .)
    RPAREN          reduce using rule 9 (expression -> NUMBER .)


state 7

    (2) statement -> expression SEMICOLON .

    $end            reduce using rule 2 (statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 2 (statement -> expression SEMICOLON .)


state 8

    (4) expression -> expression PLUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 15

state 9

    (5) expression -> expression MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 16

state 10

    (6) expression -> expression TIMES . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 17

state 11

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 18

state 12

    (3) statement -> IDENTIFIER LBRACE . statement RBRACE
    (2) statement -> . expression SEMICOLON
    (3) statement -> . IDENTIFIER LBRACE statement RBRACE
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . LPAREN expression RPAREN
    (9) expression -> . NUMBER
    (10) expression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 4
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6

    statement                      shift and go to state 19
    expression                     shift and go to state 3

state 13

    (8) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 20
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11


state 14

    (10) expression -> IDENTIFIER .

    RPAREN          reduce using rule 10 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 10 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 10 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 10 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 10 (expression -> IDENTIFIER .)


state 15

    (4) expression -> expression PLUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 4 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 4 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 4 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 16

    (5) expression -> expression MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 5 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 10
    DIVIDE          shift and go to state 11

  ! TIMES           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 17

    (6) expression -> expression TIMES expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 6 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 6 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 6 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 6 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 6 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 6 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 18

    (7) expression -> expression DIVIDE expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    SEMICOLON       reduce using rule 7 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]
  ! TIMES           [ shift and go to state 10 ]
  ! DIVIDE          [ shift and go to state 11 ]


state 19

    (3) statement -> IDENTIFIER LBRACE statement . RBRACE

    RBRACE          shift and go to state 21


state 20

    (8) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 8 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (expression -> LPAREN expression RPAREN .)


state 21

    (3) statement -> IDENTIFIER LBRACE statement RBRACE .

    $end            reduce using rule 3 (statement -> IDENTIFIER LBRACE statement RBRACE .)
    RBRACE          reduce using rule 3 (statement -> IDENTIFIER LBRACE statement RBRACE .)

