
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEDIVIDE EQUALS IDENTIFIER INT LBRACE LPAREN MINUS NUMBER PLUS RBRACE RESERVED RPAREN SEMICOLON STRING TIMESprogram : statementstatement : expression SEMICOLON\n                 | IDENTIFIER LBRACE statement RBRACEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,5,8,9,10,11,12,],[4,14,14,14,14,14,4,]),'LPAREN':([0,5,8,9,10,11,12,],[5,5,5,5,5,5,5,]),'NUMBER':([0,5,8,9,10,11,12,],[6,6,6,6,6,6,6,]),'$end':([1,2,7,21,],[0,-1,-2,-3,]),'SEMICOLON':([3,4,6,14,15,16,17,18,20,],[7,-10,-9,-10,-4,-5,-6,-7,-8,]),'PLUS':([3,4,6,13,14,15,16,17,18,20,],[8,-10,-9,8,-10,-4,-5,-6,-7,-8,]),'MINUS':([3,4,6,13,14,15,16,17,18,20,],[9,-10,-9,9,-10,-4,-5,-6,-7,-8,]),'TIMES':([3,4,6,13,14,15,16,17,18,20,],[10,-10,-9,10,-10,10,10,-6,-7,-8,]),'DIVIDE':([3,4,6,13,14,15,16,17,18,20,],[11,-10,-9,11,-10,11,11,-6,-7,-8,]),'LBRACE':([4,],[12,]),'RPAREN':([6,13,14,15,16,17,18,20,],[-9,20,-10,-4,-5,-6,-7,-8,]),'RBRACE':([7,19,21,],[-2,21,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,12,],[2,19,]),'expression':([0,5,8,9,10,11,12,],[3,13,15,16,17,18,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','syntax_analyzer.py',12),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','syntax_analyzer.py',16),
  ('statement -> IDENTIFIER LBRACE statement RBRACE','statement',4,'p_statement','syntax_analyzer.py',17),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','syntax_analyzer.py',21),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','syntax_analyzer.py',22),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','syntax_analyzer.py',23),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','syntax_analyzer.py',24),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','syntax_analyzer.py',28),
  ('expression -> NUMBER','expression',1,'p_expression_number','syntax_analyzer.py',32),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','syntax_analyzer.py',36),
]
